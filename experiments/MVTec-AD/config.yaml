version: v1.0.0
random_seed: 133
port: 11111

dataset:
  type: MVTecAD
  classes: all
  image_dir: ./data/mvtec_anomaly_detection
  use_cache: True
  input_size: [224,224] # [h,w]
  normalize:
    mean: [ 0.485, 0.456, 0.406 ]
    std: [ 0.229, 0.224, 0.225 ]
  batch_size: 16
  num_workers: 2 # number of workers of dataloader for each process

criterion:
  - name: FeatureMSELoss
    type: FeatureMSELoss
    kwargs:
      weight: 1.0
  - name: CosinConsistentLoss
    type: CosinConsistentLoss
    kwargs:
      threshold: 0.1
      weight: 0.0001

trainer:
  max_epoch: 1000
  clip_max_norm: 0.1
  val_freq_epoch: 20
  print_freq_step: 1
  tb_freq_step: 1
  lr_scheduler:
    type: StepLR
    kwargs:
      step_size: 800
      gamma: 0.1
  optimizer:
    type: AdamW
    kwargs:
      lr: 0.0001
      betas: [0.9, 0.999]
      weight_decay: 0.0001

saver:
  auto_resume: False
  always_save: False
  load_path: checkpoints/ckpt.pth.tar
  save_dir: checkpoints/
  log_dir: log/


evaluator:
  save_dir: result_eval_temp
  key_metric: mean_image_auc
  metrics:
    - image_auc
    - pixel_auc
  scalar:
    - mean_image_auc
    - mean_pixel_auc
  vis_compound:
    save_dir: vis_compound
    max_score: null
    min_score: null

frozen_layers: [backbone]

net:
    - name: backbone
      type: models.backbones.wide_resnet50_2
      frozen: True
      kwargs:
        pretrained: True
        # select outlayers from: resnet [1,2,3,4], efficientnet [1,2,3,4,5]
        # empirically, for industrial: resnet [1,2,3] or [2,3], efficientnet [1,2,3,4] or [2,3,4]
        outlayers: [ 1,2,3 ]
    - name: neck
      prev: backbone
      type: models.necks.MFAA
      kwargs:
        outstrides: [16]
    - name: reconstruction
      prev: neck
      type: models.reconstructions.MGCFR
      kwargs:
        pos_embed_type: learned
        hidden_dim: 256
        nhead: 8
        num_encoder_layers: 4
        num_decoder_layers: 4
        dropout: 0.1
        dim_feedforward: 1024
        proj_mlp_ratio: 1.
        memory_module:
          embed_dim: 256
          num_embeds: 128
          scale: 10.0
          init_norm: 0.4
        activation: relu
        feature_noise:
          scale: 3.2
          prob: 1.0
        neighbor_mask:
          neighbor_size: [7,7]
          mask: [True, True, True] # whether use mask in [enc, dec1, dec2]
        initializer:
          method: xavier_uniform
        predict:
          avgpool_size: [16, 16]
